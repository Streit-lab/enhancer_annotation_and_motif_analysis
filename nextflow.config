#!/usr/bin/env nextflow

params {
    // Pipeline defaults
    publish_dir_mode            = 'copy'
    outdir                      = './results'
    conda.enabled               = false
    debug                       = false
    extend_peaks                = 0
    markov_background           = null
    enhancer_window             = 50000
    gtf_gene_name_col           = 'gene_name'
    gtf_gene_id_col             = 'gene_id'
    fimo_pval                   = 0.0001

    // Max resource options
    max_memory                  = "128.GB"
    max_cpus                    = 16
    max_time                    = "240.h"

}

// Include base config and profiles
includeConfig "conf/base.config"

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'


profiles {
    conda {
        params.enable_conda    = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        // Avoid this error:
        //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
        // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
        // once this is established and works well, nextflow might implement this behavior as new default.
        docker.runOptions      = "-u \$(id -u):\$(id -g)"
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }

    local                     { includeConfig "conf/local.config"                     } // Sets up compute resources for local computing run
    test                      { includeConfig "conf/test.config"                      } // Runs test
}


// Capture exit codes from upstream processes when piping
process.shell = ["/bin/bash", "-euo", "pipefail"]

manifest {
    name            = 'Sreit-lab/enhancer_annotation_and_motif_analysis'
    author          = 'Alex Thiery'
    homePage        = 'https://github.com/Streit-lab/enhancer_annotation_and_motif_analysis'
    description     = 'Nextflow pipeline for filtering enhancers associated to differentially expressed genes, and then screening for motifs of interest.'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.10.3'
    version = '1.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == "memory") {
        try {
        if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
            return params.max_memory as nextflow.util.MemoryUnit
        else
            return obj
        } catch (all) {
        println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
        return obj
        }
    } else if (type == "time") {
        try {
        if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
            return params.max_time as nextflow.util.Duration
        else
            return obj
        } catch (all) {
        println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
        return obj
        }
    } else if (type == "cpus") {
        try {
        return Math.min( obj, params.max_cpus as int )
        } catch (all) {
        println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
        return obj
        }
    }
}

